import { Controller } from '@hotwired/stimulus';
import { } from './base_controller.js';

/**
 * @file Ce fichier contient le contr√¥leur Stimulus 'cerveau'.
 * @description Ce contr√¥leur impl√©mente le patron de conception M√©diateur (Mediator Pattern).
 * Il agit comme le hub de communication central pour toute l'application, recevant des √©v√©nements
 * de divers composants et orchestrant les r√©ponses appropri√©es. Il ne doit pas √™tre attach√© √† un
 * composant d'UI sp√©cifique mais plut√¥t √† un √©l√©ment global comme `<body>`.
 */

/**
 * @class CerveauController
 * @extends Controller
 * @description Le contr√¥leur Cerveau est le m√©diateur central de l'application.
 */
export default class extends Controller {
    /**
     * M√©thode du cycle de vie de Stimulus. S'ex√©cute lorsque le contr√¥leur est connect√© au DOM.
     * Met en place l'√©couteur d'√©v√©nement principal `cerveau:event`.
     */
    connect() {
        this.nomControleur = "Cerveau";
        // --- NOUVELLE ARCHITECTURE : Le Cerveau devient la source de v√©rit√© pour la s√©lection ---
        this.selectionState = []; // Tableau des objets "selecto"
        this.selectionIds = new Set(); // Pour une recherche rapide des IDs
        this.currentIdEntreprise = null; // NOUVEAU : Stocke l'ID de l'entreprise du contexte actuel

        console.log(this.nomControleur + "üß† Cerveau pr√™t √† orchestrer.");
        // --- CORRECTION : Lier la fonction une seule fois et stocker la r√©f√©rence ---
        this.boundHandleEvent = this.handleEvent.bind(this);
        document.addEventListener('cerveau:event', this.boundHandleEvent);
    }

    /**
     * M√©thode du cycle de vie de Stimulus. Nettoie l'√©couteur d'√©v√©nement pour √©viter les fuites de m√©moire.
     */
    disconnect() {
        document.removeEventListener('cerveau:event', this.boundHandleEvent);
    }

    /**
     * Point d'entr√©e unique pour tous les √©v√©nements destin√©s au Cerveau.
     * Analyse le type d'√©v√©nement et d√©l√®gue l'action appropri√©e.
     * @param {CustomEvent} event - L'√©v√©nement personnalis√© re√ßu.
     * @property {object} event.detail - Le conteneur de donn√©es de l'√©v√©nement.
     * @property {string} event.detail.type - Le type d'action demand√© (ex: 'ui:component.load').
     * @property {string} event.detail.source - Le nom du contr√¥leur qui a √©mis l'√©v√©nement.
     * @property {object} event.detail.payload - Les donn√©es sp√©cifiques √† l'√©v√©nement.
     * @property {number} event.detail.timestamp - L'horodatage de l'√©mission de l'√©v√©nement.
     */
    handleEvent(event) {
        const { type, source, payload, timestamp } = event.detail;

        // Validation de base de l'√©v√©nement
        if (!type || !source || !payload || !timestamp) {
            console.error("üß† [Cerveau] √âv√©nement invalide re√ßu. Structure attendue: {type, source, payload, timestamp}", event.detail);
            return;
        }

        // Log stylis√© pour le d√©bogage
        // console.groupCollapsed(`üß† [Cerveau] √âv√©nement Re√ßu: %c${type}`, 'color: #4CAF50; font-weight: bold;');
        // console.log(`| Source:`, source);
        // console.log(`| Donn√©es (Payload):`, payload);
        // console.log(`| Horodatage:`, new Date(timestamp).toLocaleString('fr-FR'));
        // console.groupEnd();
        // console.log(this.nomControleur + " - Code: 1986", event.detail);


        switch (type) {
            // --- Chargement du composant dans l'espace de travail ---
            case 'ui:component.load': // Utilis√© pour charger une rubrique dans l'espace de travail
                console.log(this.nomControleur + `üß† [Cerveau]-> ACTION: Charger le composant '${payload.componentName}' (entit√©: ${payload.entityName}) pour l'espace de travail.`);
                this.loadWorkspaceComponent(payload.componentName, payload.entityName, payload.idEntreprise, payload.idInvite);
                break;

            // NOUVEAU : Un composant (view-manager) initialise le contexte
            case 'app:context.initialized':
                console.log("-> ACTION: Le contexte de la rubrique a √©t√© initialis√©.");

                this.currentIdEntreprise = payload.idEntreprise;
                this.currentIdInvite = payload.idInvite;

                this.idEntreprise = payload.idEntreprise;
                this.idInvite = payload.idInvite;

                this.broadcast('ui:tab.context-changed', payload); // On relaie pour que la toolbar se mette √† jour
                break;

            case 'app:error.api':
                console.error("-> GESTION ERREUR: Une erreur API a √©t√© intercept√©e.");
                console.error("| D√©tails:", payload.error);
                console.log("-> ACTION: Afficher une notification d'erreur standard √† l'utilisateur.");
                // Code futur: this.broadcast('notification:show', { type: 'error', message: 'Une erreur serveur est survenue. Veuillez r√©essayer.' });
                break;

            // --- NOUVEAU : Relais du changement de s√©lection d'un √©l√©ment de liste ---
            case 'ui:list-row.selection-changed':
                console.log("-> ACTION: Mise √† jour de l'√©tat de s√©lection.");
                this.updateSelectionState(payload);
                break;

            case 'ui:selection.updated':
                // Cet √©v√©nement est maintenant obsol√®te, la logique est dans 'ui:list-row.selection-changed'
                console.warn("-> ATTENTION: √âv√©nement 'ui:selection.updated' obsol√®te. La logique est g√©r√©e par le Cerveau.");
                break;

            // --- NOUVEAU : G√®re la demande de fermeture d'une rubrique ---
            case 'ui:toolbar.close-request':
                console.log("-> ACTION: Demande de fermeture de la rubrique. Diffusion de l'ordre de retour au tableau de bord.");
                this.broadcast('app:workspace.load-default');
                break;

            // --- NOUVEAU : G√®re le changement de contexte d'un onglet ---
            case 'ui:tab.context-changed':
                console.log("-> ACTION: Le contexte d'un onglet a chang√©. Restauration de la s√©lection pour cet onglet.");
                // On restaure l'√©tat de la s√©lection avec les "selectos" fournis par le view-manager.
                this.selectionState = payload.selectos || [];
                this.selectionIds = new Set(this.selectionState.map(s => s.id));
                // On publie la s√©lection ET on rediffuse le contexte de l'onglet pour les composants comme la toolbar.
                this.publishSelection();
                this.broadcast('ui:tab.context-changed', {
                    ...payload
                });
                break;
            case 'dialog:boite-dialogue:init-request':
                this.openDialogBox(payload);
                break;
            case 'ui:boite-dialogue:add-collection-item-request':
                this.openDialogBox(payload);
                break;

            // --- NOUVEAU : G√®re la demande d'ajout depuis la barre d'outils ---
            case 'ui:toolbar.add-request':
                this.openDialogBox(payload);
                break;
            
            // AJOUT: G√©rer explicitement la demande de modification
            case 'ui:toolbar.edit-request':
                this.openDialogBox(payload);
                break;

            // --- NOUVEAU : Gestion des √©v√©nements du cycle de vie des dialogues ---
            case 'ui:dialog.opened':
                console.log("-> ACTION: Une bo√Æte de dialogue a √©t√© ouverte.", payload);
                // Aucune diffusion n√©cessaire pour le moment, mais le hook est l√†.
                break;

            case 'app:entity.saved':
                console.log("-> ACTION: Une entit√© a √©t√© sauvegard√©e. Demande de rafra√Æchissement des listes et affichage d'une notification.");
                // Diffusion pour rafra√Æchir les listes (principale et collections)
                console.log(this.nomControleur + " handleEvent - (1/5) Actualisation des listes", payload);
                this.broadcast('app:list.refresh-request', {
                    originatorId: payload.originatorId, // Permet au bon collection-manager de se rafra√Æchir
                    idEntreprise: this.currentIdEntreprise, // MISSION 2 : On ajoute l'ID de l'entreprise
                    idInvite: this.currentIdInvite,
                });
                // Diffusion pour afficher un toast de succ√®s
                this.broadcast('app:notification.show', { text: 'Enregistrement r√©ussi !', type: 'success' });
                break;

            case 'app:form.validation-error':
                console.warn("-> ACTION: Une erreur de validation de formulaire a √©t√© re√ßue.", payload);
                this.broadcast('app:notification.show', { text: payload.message || 'Erreur de validation.', type: 'error' });
                break;

            case 'ui:dialog.closed':
                console.log("-> ACTION: Une bo√Æte de dialogue a √©t√© ferm√©e.", payload);
                break;

            // --- NOUVEAU : G√®re la demande d'actualisation depuis la barre d'outils ---
            case 'ui:toolbar.refresh-request':
                console.log("-> ACTION: Demande d'actualisation de la liste principale. Diffusion de l'ordre de rafra√Æchissement.");
                this.broadcast('app:list.refresh-request', {
                    idEntreprise: this.currentIdEntreprise,
                    idInvite: this.currentIdInvite,
                });
                break;

            // --- NOUVEAU : G√®re la demande d'ouverture du menu contextuel ---
            case 'ui:context-menu.request':
                console.log("-> ACTION: Demande d'affichage du menu contextuel. Diffusion de l'ordre.");
                this.broadcast('app:context-menu.show', payload);
                break;

            // --- NOUVEAU : G√®re la demande de suppression API ---
            case 'app:api.delete-request':
                console.log(this.nomControleur + " - Code: 1986 - Lancement de la suppression API", payload);
                this._handleApiDeleteRequest(payload);
                break;

            case 'dialog:confirmation.request':
                console.log("-> ACTION: Demande de confirmation. Diffusion de l'ordre.");
                this._requestDeleteConfirmation(payload);
                break;

            // --- NOUVEAU : G√®re la demande de suppression depuis la barre d'outils ---
            case 'ui:toolbar.delete-request':
                console.log(this.nomControleur + " - Code: 1986 - Demande de suppression", payload);
                this._handleToolbarDeleteRequest(payload);
                break;

            // --- NOUVEAU : G√®re la notification de statut ---
            case 'ui:status.notify':
                console.log("-> ACTION: Un message de statut a √©t√© re√ßu. Diffusion pour affichage.");
                this.broadcast('app:status.updated', payload);
                break;

            // --- NOUVEAU : G√®re la demande d'ouverture d'un √©l√©ment (depuis barre d'outils ou menu contextuel) ---
            case 'ui:toolbar.open-request':
                console.log("-> ACTION: Demande d'ouverture d'√©l√©ment(s). Diffusion de l'ordre au WorkspaceManager.");
                this._handleOpenRequest(payload);
                break;

            // --- NOUVEAU : G√®re la demande de s√©lection/d√©s√©lection de tous les √©l√©ments ---
            case 'ui:toolbar.select-all-request':
                console.log("-> ACTION: Demande de s√©lection totale. Diffusion de l'ordre au ListManager.");
                this.broadcast('app:list.toggle-all-request', payload);
                break;

            default:
                console.warn(`-> ATTENTION: Aucun gestionnaire d√©fini pour l'√©v√©nement "${type}".`);
        }
    }


    /**
     * G√®re une demande d'ouverture d'√©l√©ments en diffusant un √©v√©nement pour chaque entit√© s√©lectionn√©e.
     * @param {object} payload - Le payload contenant le tableau `entities`.
     * @param {Array} payload.entities - Tableau d'objets "selecto".
     * @private
     */
    _handleOpenRequest(payload) {
        if (payload.entities && payload.entities.length > 0) {
            payload.entities.forEach(selecto => {
                // Le Cerveau relaie l'objet "selecto" complet.
                // Le workspace-manager est responsable de l'interpr√©ter.
                this.broadcast('app:liste-element:openned', selecto);
            });
        }
    }


    openDialogBox(payload) {
        console.groupCollapsed(`${this.nomControleur} - handleEvent - EDITDIAL(1)`);
        console.log(`| Mode: ${payload.isCreationMode ? 'Cr√©ation' : '√âdition'}`);
        console.log('| Entit√©:', payload.entity);
        console.log('| Contexte:', payload.context);
        console.log('| Canvas:', payload.entityFormCanvas);
        console.log('| idEntreprise:', this.idEntreprise);
        console.log('| idInvite:', this.idInvite);
        console.groupEnd();

        this.broadcast('app:boite-dialogue:init-request', {
            entity: payload.entity, // Entit√© vide pour le mode cr√©ation
            entityFormCanvas: payload.entityFormCanvas,
            isCreationMode: payload.isCreationMode,
            context: {
                ...payload.context,
                idEntreprise: this.idEntreprise,
                idInvite: this.idInvite
            }
        });
    }

    /**
     * Met √† jour l'√©tat de la s√©lection et publie le changement.
     * @param {object} selecto - L'objet de s√©lection d'une ligne.
     * @private
     */
    updateSelectionState(selecto) {
        const { id, isChecked } = selecto;

        if (isChecked) {
            if (!this.selectionIds.has(id)) {
                this.selectionState.push(selecto);
                this.selectionIds.add(id);
            }
        } else {
            if (this.selectionIds.has(id)) {
                this.selectionState = this.selectionState.filter(item => item.id !== id);
                this.selectionIds.delete(id);
            }
        }
        this.publishSelection();
    }

    /**
     * Diffuse l'√©tat de s√©lection actuel √† toute l'application.
     * @private
     */
    publishSelection() {
        // --- NOUVELLE ARCHITECTURE ---
        // Le payload est maintenant directement le tableau des "selectos".
        console.log("-> ACTION: Publication de l'√©tat de s√©lection mis √† jour.", this.selectionState);
        this.broadcast('ui:selection.changed', this.selectionState);
    }

    /**
     * Charge le contenu HTML d'un composant pour l'espace de travail et diffuse le r√©sultat.
     * @param {string} componentName Le nom du fichier de template du composant.
     * @fires workspace:component.loaded
     * @private
     */
    async loadWorkspaceComponent(componentName, entityName, idEntreprise, idInvite) {
        // On construit l'URL avec les IDs dans le chemin, comme d√©fini par la route Symfony
        let url = `/espacedetravail/api/load-component/${idInvite}/${idEntreprise}?component=${componentName}`;
        // On ajoute le param√®tre 'entity' s'il est fourni
        if (entityName) {
            url += `&entity=${entityName}`;
        }

        // LOG: V√©rifier l'URL finale avant l'appel fetch
        console.log(`[Cerveau] Appel fetch vers l'URL: ${url}`);

        try {
            const response = await fetch(url);
            if (!response.ok) {
                throw new Error(`Erreur serveur (${response.status}): ${response.statusText}`);
            }
            const html = await response.text();

            // On diffuse le HTML aux contr√¥leurs qui √©coutent (ex: espace-de-travail)
            this.broadcast('workspace:component.loaded', { html: html, error: null });

        } catch (error) {
            console.error(`[Cerveau] √âchec du chargement du composant '${componentName}':`, error);
            this.broadcast('workspace:component.loaded', { html: null, error: error.message });
        }
    }

    /**
     * M√©thode utilitaire pour diffuser un √©v√©nement √† l'√©chelle de l'application.
     * @param {string} eventName - Le nom de l'√©v√©nement √† diffuser.
     * @param {object} [detail={}] - Le payload √† inclure dans `event.detail`.
     * @private
     */
    broadcast(eventName, detail) {
        document.dispatchEvent(new CustomEvent(eventName, { bubbles: true, detail }));
    }


    

    /**
     * G√®re la logique de suppression d'√©l√©ments via l'API en ex√©cutant plusieurs requ√™tes en parall√®le.
     * Notifie le reste de l'application en cas de succ√®s ou d'√©chec.
     * @param {object} payload - Le payload contenant les IDs, l'URL et l'originatorId.
     * @param {number[]} payload.ids - Tableau des IDs des entit√©s √† supprimer.
     * @param {string} payload.url - L'URL de base de l'API de suppression.
     * @param {string} [payload.originatorId] - L'ID du composant qui a initi√© la demande (pour un rafra√Æchissement cibl√©).
     * @private
     */
    _handleApiDeleteRequest(payload) {
        const { ids, url, originatorId } = payload;

        // On cr√©e un tableau de promesses, une pour chaque requ√™te de suppression.
        const deletePromises = ids.map(id => {
            const deleteUrl = `${url}/${id}`; // Construit l'URL finale pour chaque ID.
            return fetch(deleteUrl, { method: 'DELETE' })
                .then(response => {
                    if (!response.ok) throw new Error(`Erreur lors de la suppression de l'√©l√©ment ${id}.`);
                    return response.json();
                });
        });

        // On attend que toutes les promesses de suppression soient r√©solues.
        Promise.all(deletePromises)
            .then(results => {
                const message = results.length > 1 ? `${results.length} √©l√©ments supprim√©s avec succ√®s.` : '√âl√©ment supprim√© avec succ√®s.';
                console.log(`${this.nomControleur} - SUCC√àS: Suppression(s) r√©ussie(s).`, results);
                this.broadcast('app:notification.show', { text: message, type: 'success' });
                this.broadcast('app:list.refresh-request', { originatorId: originatorId, idEntreprise: this.currentIdEntreprise, idInvite: this.currentIdInvite });
                this.broadcast('ui:confirmation.close');
            })
            .catch(error => {
                console.error("-> ERREUR: √âchec de la suppression API.", error);
                this.broadcast('app:error.api', { error: error.message || "La suppression a √©chou√©." });
                this.broadcast('ui:confirmation.close'); // Ferme aussi la modale en cas d'erreur.
            });
    }


    /**
     * Encapsule la logique de diffusion d'une demande de confirmation de suppression.
     * @param {object} payload - Le payload de l'√©v√©nement d'origine, doit contenir `selection`.
     * @private
     */
    _requestDeleteConfirmation(payload) {
        const itemCount = payload.selection ? payload.selection.length : 0;
        if (itemCount === 0) return; // Ne rien faire si la s√©lection est vide.

        this.broadcast('ui:confirmation.request', {
            title: 'Confirmation de suppression',
            body: `√ätes-vous s√ªr de vouloir supprimer ${itemCount} √©l√©ment(s) ?`,
            onConfirm: { type: 'app:api.delete-request', payload: payload }
        });
    }


    
    /**
     * G√®re une demande de suppression provenant de la barre d'outils en construisant
     * et en diffusant une demande de confirmation.
     * @param {object} payload - Le payload de l'√©v√©nement, contenant `selection` et `actionConfig`.
     * @private
     */
    _handleToolbarDeleteRequest(payload) {
        this.broadcast('ui:confirmation.request', {
            title: payload.title || 'Confirmation de suppression',
            body: payload.body || `√ätes-vous s√ªr de vouloir supprimer ${payload.selection.length} √©l√©ment(s) ?`,
            onConfirm: {
                type: 'app:api.delete-request',
                payload: {
                    ids: payload.selection, // Les IDs √† supprimer
                    url: payload.actionConfig.url, // L'URL de base pour la suppression
                    originatorId: payload.actionConfig?.originatorId // L'ID de la collection √† rafra√Æchir (optionnel)
                }
            }
        });
    }
}