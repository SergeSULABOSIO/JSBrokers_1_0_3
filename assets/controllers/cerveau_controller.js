import { Controller } from '@hotwired/stimulus';
import { } from './base_controller.js';

/**
 * @file Ce fichier contient le contr√¥leur Stimulus 'cerveau'.
 * @description Ce contr√¥leur impl√©mente le patron de conception M√©diateur (Mediator Pattern).
 * Il agit comme le hub de communication central pour toute l'application, recevant des √©v√©nements
 * de divers composants et orchestrant les r√©ponses appropri√©es. Il ne doit pas √™tre attach√© √† un
 * composant d'UI sp√©cifique mais plut√¥t √† un √©l√©ment global comme `<body>`.
 */

/**
 * @class CerveauController
 * @extends Controller
 * @description Le contr√¥leur Cerveau est le m√©diateur central de l'application.
 */
export default class extends Controller {
    /**
     * M√©thode du cycle de vie de Stimulus. S'ex√©cute lorsque le contr√¥leur est connect√© au DOM.
     * Met en place l'√©couteur d'√©v√©nement principal `cerveau:event`.
     */
    connect() {
        this.nomControleur = "Cerveau";
        console.log(this.nomControleur + "üß† Cerveau pr√™t √† orchestrer.");
        // --- CORRECTION : Lier la fonction une seule fois et stocker la r√©f√©rence ---
        this.boundHandleEvent = this.handleEvent.bind(this);
        document.addEventListener('cerveau:event', this.boundHandleEvent);
    }

    /**
     * M√©thode du cycle de vie de Stimulus. Nettoie l'√©couteur d'√©v√©nement pour √©viter les fuites de m√©moire.
     */
    disconnect() {
        document.removeEventListener('cerveau:event', this.boundHandleEvent);
    }

    /**
     * Point d'entr√©e unique pour tous les √©v√©nements destin√©s au Cerveau.
     * Analyse le type d'√©v√©nement et d√©l√®gue l'action appropri√©e.
     * @param {CustomEvent} event - L'√©v√©nement personnalis√© re√ßu.
     * @property {object} event.detail - Le conteneur de donn√©es de l'√©v√©nement.
     * @property {string} event.detail.type - Le type d'action demand√© (ex: 'ui:component.load').
     * @property {string} event.detail.source - Le nom du contr√¥leur qui a √©mis l'√©v√©nement.
     * @property {object} event.detail.payload - Les donn√©es sp√©cifiques √† l'√©v√©nement.
     * @property {number} event.detail.timestamp - L'horodatage de l'√©mission de l'√©v√©nement.
     */
    handleEvent(event) {
        const { type, source, payload, timestamp } = event.detail;

        // Validation de base de l'√©v√©nement
        if (!type || !source || !payload || !timestamp) {
            console.error("üß† [Cerveau] √âv√©nement invalide re√ßu. Structure attendue: {type, source, payload, timestamp}", event.detail);
            return;
        }

        // Log stylis√© pour le d√©bogage
        console.groupCollapsed(`üß† [Cerveau] √âv√©nement Re√ßu: %c${type}`, 'color: #4CAF50; font-weight: bold;');
        console.log(`| Source:`, source);
        console.log(`| Donn√©es (Payload):`, payload);
        console.log(`| Horodatage:`, new Date(timestamp).toLocaleString('fr-FR'));

        switch (type) {
            // --- Chargement du composant dans l'espace de travail ---
            case 'ui:component.load': // Utilis√© pour charger une rubrique dans l'espace de travail
                console.log(this.nomControleur + `üß† [Cerveau]-> ACTION: Charger le composant '${payload.componentName}' (entit√©: ${payload.entityName}) pour l'espace de travail.`);
                this.loadWorkspaceComponent(payload.componentName, payload.entityName);
                break;

            case 'app:error.api':
                console.error("-> GESTION ERREUR: Une erreur API a √©t√© intercept√©e.");
                console.error("| D√©tails:", payload.error);
                console.log("-> ACTION: Afficher une notification d'erreur standard √† l'utilisateur.");
                // Code futur: this.broadcast('notification:show', { type: 'error', message: 'Une erreur serveur est survenue. Veuillez r√©essayer.' });
                break;

            // --- NOUVEAU : Relais du changement de s√©lection d'un √©l√©ment de liste ---
            case 'ui:list-row.selection-changed':
                console.log("-> ACTION: Relayer le changement de s√©lection d'un √©l√©ment vers la liste principale.");
                this.broadcast('app:list-row.selection-changed:relay', payload);
                break;

            // --- NOUVEAU : Relais de l'√©tat de s√©lection complet d'une liste ---
            // Cet √©v√©nement est √©mis par liste-principale APRES avoir mis √† jour son √©tat.
            case 'ui:selection.updated':
                console.log("-> ACTION: L'√©tat de la s√©lection a √©t√© mis √† jour. Diffusion aux composants d√©pendants (barre d'outils, etc.).");
                this.broadcast('ui:selection.changed', payload);
                break;

            // --- NOUVEAU : G√®re la demande de fermeture d'une rubrique ---
            case 'ui:toolbar.close-request':
                console.log("-> ACTION: Demande de fermeture de la rubrique. Diffusion de l'ordre de retour au tableau de bord.");
                this.broadcast('app:workspace.load-default');
                break;

            // --- NOUVEAU : G√®re le changement de contexte d'un onglet ---
            case 'ui:tab.context-changed':
                console.log("-> ACTION: Le contexte d'un onglet a chang√©. Diffusion de l'√©tat de s√©lection mis √† jour.");
                this.broadcast('ui:selection.changed', payload);
                break;

            // --- NOUVEAU : G√®re la demande d'ajout depuis la barre d'outils ---
            case 'ui:toolbar.add-request':
                console.log("-> ACTION: Demande d'ajout. Ouverture de la bo√Æte de dialogue.");
                this.broadcast('app:boite-dialogue:init-request', {
                    entity: {}, // Entit√© vide pour le mode cr√©ation
                    entityFormCanvas: payload.entityFormCanvas,
                    context: {}
                });
                break;

            // --- NOUVEAU : Gestion des √©v√©nements du cycle de vie des dialogues ---
            case 'ui:dialog.opened':
                console.log("-> ACTION: Une bo√Æte de dialogue a √©t√© ouverte.", payload);
                // Aucune diffusion n√©cessaire pour le moment, mais le hook est l√†.
                break;

            case 'app:entity.saved':
                console.log("-> ACTION: Une entit√© a √©t√© sauvegard√©e. Demande de rafra√Æchissement des listes et affichage d'une notification.");
                // Diffusion pour rafra√Æchir les listes (principale et collections)
                this.broadcast('app:list.refresh-request', {
                    originatorId: payload.originatorId // Permet au bon collection-manager de se rafra√Æchir
                });
                // Diffusion pour afficher un toast de succ√®s
                this.broadcast('app:notification.show', { text: 'Enregistrement r√©ussi !', type: 'success' });
                break;

            case 'app:form.validation-error':
                console.warn("-> ACTION: Une erreur de validation de formulaire a √©t√© re√ßue.", payload);
                this.broadcast('app:notification.show', { text: payload.message || 'Erreur de validation.', type: 'error' });
                break;

            case 'ui:dialog.closed':
                console.log("-> ACTION: Une bo√Æte de dialogue a √©t√© ferm√©e.", payload);
                break;
            
            // --- NOUVEAU : G√®re la demande d'actualisation depuis la barre d'outils ---
            case 'ui:toolbar.refresh-request':
                console.log("-> ACTION: Demande d'actualisation de la liste principale. Diffusion de l'ordre de rafra√Æchissement.");
                this.broadcast('app:list.refresh-request', {});
                break;
            
            // --- NOUVEAU : G√®re la demande d'ouverture du menu contextuel ---
            case 'ui:context-menu.request':
                console.log("-> ACTION: Demande d'affichage du menu contextuel. Diffusion de l'ordre.");
                this.broadcast('app:context-menu.show', payload);
                break;

            // --- NOUVEAU : G√®re la demande de suppression depuis la barre d'outils ---
            case 'ui:toolbar.delete-request':
                console.log("-> ACTION: Demande de suppression re√ßue. Ouverture du dialogue de confirmation.");
                this.broadcast('ui:confirmation.request', {
                    title: 'Confirmation de suppression',
                    body: `√ätes-vous s√ªr de vouloir supprimer ${payload.selection.length} √©l√©ment(s) ?`,
                    onConfirm: { type: 'app:api.delete-request', payload: payload }
                });
                break;

            // --- NOUVEAU : G√®re la notification de statut ---
            case 'ui:status.notify':
                console.log("-> ACTION: Un message de statut a √©t√© re√ßu. Diffusion pour affichage.");
                this.broadcast('app:status.updated', payload);
                break;

            default:
                console.warn(`-> ATTENTION: Aucun gestionnaire d√©fini pour l'√©v√©nement "${type}".`);
        }

        console.groupEnd();
    }

    /**
     * Charge le contenu HTML d'un composant pour l'espace de travail et diffuse le r√©sultat.
     * @param {string} componentName Le nom du fichier de template du composant.
     * @fires workspace:component.loaded
     * @private
     */
    async loadWorkspaceComponent(componentName, entityName) {
        let url = `/espacedetravail/api/load-component?component=${componentName}`;
        // On ajoute le param√®tre 'entity' s'il est fourni
        if (entityName) {
            url += `&entity=${entityName}`;
        }

        // LOG: V√©rifier l'URL finale avant l'appel fetch
        console.log(`[Cerveau] Appel fetch vers l'URL: ${url}`);

        try {
            const response = await fetch(url);
            if (!response.ok) {
                throw new Error(`Erreur serveur (${response.status}): ${response.statusText}`);
            }
            const html = await response.text();

            // On diffuse le HTML aux contr√¥leurs qui √©coutent (ex: espace-de-travail)
            this.broadcast('workspace:component.loaded', { html: html, error: null });

        } catch (error) {
            console.error(`[Cerveau] √âchec du chargement du composant '${componentName}':`, error);
            this.broadcast('workspace:component.loaded', { html: null, error: error.message });
        }
    }

    /**
     * M√©thode utilitaire pour diffuser un √©v√©nement √† l'√©chelle de l'application.
     * @param {string} eventName - Le nom de l'√©v√©nement √† diffuser.
     * @param {object} [detail={}] - Le payload √† inclure dans `event.detail`.
     * @private
     */
    broadcast(eventName, detail) {
        document.dispatchEvent(new CustomEvent(eventName, { bubbles: true, detail }));
    }
}