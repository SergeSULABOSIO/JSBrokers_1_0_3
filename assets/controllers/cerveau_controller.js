import { Controller } from '@hotwired/stimulus';
import { } from './base_controller.js';

/**
 * @file Ce fichier contient le contr√¥leur Stimulus 'cerveau'.
 * @description Ce contr√¥leur impl√©mente le patron de conception M√©diateur (Mediator Pattern).
 * Il agit comme le hub de communication central pour toute l'application, recevant des √©v√©nements
 * de divers composants et orchestrant les r√©ponses appropri√©es. Il ne doit pas √™tre attach√© √† un
 * composant d'UI sp√©cifique mais plut√¥t √† un √©l√©ment global comme `<body>`.
 */

/**
 * @class CerveauController
 * @extends Controller
 * @description Le contr√¥leur Cerveau est le m√©diateur central de l'application.
 */
export default class extends Controller {
    /**
     * M√©thode du cycle de vie de Stimulus. S'ex√©cute lorsque le contr√¥leur est connect√© au DOM.
     * Met en place l'√©couteur d'√©v√©nement principal `cerveau:event`.
     */
    connect() {
        this.nomControleur = "Cerveau";
        // --- NOUVELLE ARCHITECTURE : Le Cerveau devient la source de v√©rit√© pour la s√©lection ---
        this.selectionState = []; // Tableau des objets "selecto"
        this.selectionIds = new Set(); // Pour une recherche rapide des IDs
        this.currentIdEntreprise = null;
        this.currentIdInvite = null;
        console.log(this.nomControleur + "üß† Cerveau pr√™t √† orchestrer.");
        // --- CORRECTION : Lier la fonction une seule fois et stocker la r√©f√©rence ---
        this.boundHandleEvent = this.handleEvent.bind(this);
        document.addEventListener('cerveau:event', this.boundHandleEvent);
    }

    /**
     * M√©thode du cycle de vie de Stimulus. Nettoie l'√©couteur d'√©v√©nement pour √©viter les fuites de m√©moire.
     */
    disconnect() {
        document.removeEventListener('cerveau:event', this.boundHandleEvent);
    }


    
    /**
     * Point d'entr√©e unique pour tous les √©v√©nements destin√©s au Cerveau.
     * Analyse le type d'√©v√©nement et d√©l√®gue l'action appropri√©e.
     * @param {CustomEvent} event - L'√©v√©nement personnalis√© re√ßu.
     * @property {object} event.detail - Le conteneur de donn√©es de l'√©v√©nement.
     * @property {string} event.detail.type - Le type d'action demand√© (ex: 'ui:component.load').
     * @property {string} event.detail.source - Le nom du contr√¥leur qui a √©mis l'√©v√©nement.
     * @property {object} event.detail.payload - Les donn√©es sp√©cifiques √† l'√©v√©nement.
     * @property {number} event.detail.timestamp - L'horodatage de l'√©mission de l'√©v√©nement.
     */
    handleEvent(event) {
        const { type, source, payload, timestamp } = event.detail;

        // Validation de base de l'√©v√©nement
        if (!type || !source || !payload || !timestamp) {
            console.error("üß† [Cerveau] √âv√©nement invalide re√ßu. Structure attendue: {type, source, payload, timestamp}", event.detail);
            return;
        }

        switch (type) {
            case 'ui:component.load': // Utilis√© pour charger une rubrique dans l'espace de travail
                this.loadWorkspaceComponent(payload.componentName, payload.entityName, payload.idEntreprise, payload.idInvite);
                break;

            case 'app:context.initialized':
                this._setApplicationContext(payload);
                break;

            case 'app:error.api':
                this._showNotification('Une erreur serveur est survenue. Veuillez r√©essayer.', 'error');
                break;

            case 'ui:list-row.selection-changed':
                this.updateSelectionState(payload);
                break;

            case 'ui:toolbar.close-request':
                this.broadcast('app:workspace.load-default');
                break;

            case 'ui:tab.context-changed':
                this._setSelectionState(payload.selectos || []);
                this.broadcast('ui:tab.context-changed', { ...payload });
                break;

            case 'dialog:boite-dialogue:init-request':
                this.openDialogBox(payload);
                break;

            case 'ui:boite-dialogue:add-collection-item-request':
                this.openDialogBox(payload);
                break;

            case 'ui:toolbar.add-request':
                this.openDialogBox(payload);
                break;
            
            case 'ui:toolbar.edit-request':
                this.openDialogBox(payload);
                break;

            case 'app:entity.saved':
                this._requestListRefresh(payload.originatorId);
                this._showNotification('Enregistrement r√©ussi !', 'success');
                break;

            case 'app:form.validation-error':
                this._showNotification(payload.message || 'Erreur de validation.', 'error');
                break;

            case 'ui:toolbar.refresh-request':
                // On notifie le d√©but du chargement pour que la barre de progression s'affiche
                this.broadcast('app:loading.start');
                this._requestListRefresh();
                break;

            // NOUVEAU : La liste a termin√© son actualisation.
            case 'app:list.refreshed':
                this._setSelectionState([]); // On r√©initialise la s√©lection
                this.broadcast('app:loading.stop'); // On notifie la fin pour masquer la barre de progression
                break;

            case 'ui:context-menu.request':
                this.broadcast('app:context-menu.show', payload);
                break;

            case 'app:api.delete-request':
                this._handleApiDeleteRequest(payload);
                break;

            case 'dialog:confirmation.request':
                this._requestDeleteConfirmation(payload);
                break;

            case 'ui:toolbar.delete-request':
                this._handleToolbarDeleteRequest(payload);
                break;

            case 'ui:status.notify':
                this.broadcast('app:status.updated', payload);
                break;

            case 'ui:toolbar.open-request':
                this._handleOpenRequest(payload);
                break;

            case 'ui:toolbar.select-all-request':
                this.broadcast('app:list.toggle-all-request');
                break;

            // NOUVEAU : La liste a termin√© une op√©ration de s√©lection de masse.
            case 'ui:list.selection-completed':
                this._setSelectionState(payload.selectos || []);
                break;

            default:
                console.warn(`-> ATTENTION: Aucun gestionnaire d√©fini pour l'√©v√©nement "${type}".`);
        }
    }


    /**
     * G√®re une demande d'ouverture d'√©l√©ments en diffusant un √©v√©nement pour chaque entit√© s√©lectionn√©e.
     * @param {object} payload - Le payload contenant le tableau `entities`.
     * @param {Array} payload.entities - Tableau d'objets "selecto".
     * @private
     */
    _handleOpenRequest(payload) {
        if (payload.entities && payload.entities.length > 0) {
            payload.entities.forEach(selecto => {
                // Le Cerveau relaie l'objet "selecto" complet.
                // Le workspace-manager est responsable de l'interpr√©ter.
                this.broadcast('app:liste-element:openned', selecto);
            });
        }
    }


    openDialogBox(payload) {
        console.groupCollapsed(`${this.nomControleur} - handleEvent - EDITDIAL(1)`);
        console.log(`| Mode: ${payload.isCreationMode ? 'Cr√©ation' : '√âdition'}`);
        console.log('| Entit√©:', payload.entity);
        console.log('| Canvas:', payload.entityFormCanvas);
        console.groupEnd();

        this.broadcast('app:boite-dialogue:init-request', {
            entity: payload.entity, // Entit√© vide pour le mode cr√©ation
            entityFormCanvas: payload.entityFormCanvas,
            isCreationMode: payload.isCreationMode, // Correction: isCreationMode au lieu de isCreateMode
            context: {
                ...payload.context,
                idEntreprise: this.idEntreprise,
                idInvite: this.idInvite
            }
        });
    }

    /**
     * Met √† jour l'√©tat de la s√©lection et publie le changement.
     * @param {object} selecto - L'objet de s√©lection d'une ligne.
     * @private
     */
    updateSelectionState(selecto) {
        const { id, isChecked } = selecto;

        if (isChecked) {
            if (!this.selectionIds.has(id)) {
                this.selectionState.push(selecto);
                this.selectionIds.add(id);
            }
        } else {
            if (this.selectionIds.has(id)) {
                this.selectionState = this.selectionState.filter(item => item.id !== id);
                this.selectionIds.delete(id);
            }
        }
        this.publishSelection();
    }

    /**
     * Diffuse l'√©tat de s√©lection actuel √† toute l'application.
     * @private
     */
    publishSelection() {
        // --- NOUVELLE ARCHITECTURE ---
        // Le payload est maintenant directement le tableau des "selectos".
        console.log("-> ACTION: Publication de l'√©tat de s√©lection mis √† jour.", this.selectionState);
        this.broadcast('ui:selection.changed', this.selectionState);
    }

    /**
     * D√©finit un nouvel √©tat de s√©lection complet et le publie.
     * @param {Array} [selectos=[]] - Le nouveau tableau d'objets "selecto".
     * @private
     */
    _setSelectionState(selectos = []) {
        this.selectionState = selectos;
        this.selectionIds = new Set(this.selectionState.map(s => s.id));
        this.publishSelection();
    }

    /**
     * D√©finit le contexte principal de l'application (entreprise et invit√©) et le diffuse.
     * @param {object} payload - Le payload contenant idEntreprise et idInvite.
     * @private
     */
    _setApplicationContext(payload) {
        this.currentIdEntreprise = payload.idEntreprise;
        this.currentIdInvite = payload.idInvite;
        // On relaie l'√©v√©nement pour que les composants comme la toolbar puissent se mettre √† jour.
        this.broadcast('ui:tab.context-changed', payload);
    }

    /**
     * Charge le contenu HTML d'un composant pour l'espace de travail et diffuse le r√©sultat.
     * @param {string} componentName Le nom du fichier de template du composant.
     * @fires workspace:component.loaded
     * @private
     */
    async loadWorkspaceComponent(componentName, entityName, idEntreprise, idInvite) {
        // On construit l'URL avec les IDs dans le chemin, comme d√©fini par la route Symfony
        let url = `/espacedetravail/api/load-component/${idInvite}/${idEntreprise}?component=${componentName}`;
        // On ajoute le param√®tre 'entity' s'il est fourni
        if (entityName) {
            url += `&entity=${entityName}`;
        }

        // LOG: V√©rifier l'URL finale avant l'appel fetch
        console.log(`[Cerveau] Appel fetch vers l'URL: ${url}`);

        try {
            const response = await fetch(url);
            if (!response.ok) {
                throw new Error(`Erreur serveur (${response.status}): ${response.statusText}`);
            }
            const html = await response.text();

            // On diffuse le HTML aux contr√¥leurs qui √©coutent (ex: espace-de-travail)
            this.broadcast('workspace:component.loaded', { html: html, error: null });

        } catch (error) {
            console.error(`[Cerveau] √âchec du chargement du composant '${componentName}':`, error);
            this.broadcast('workspace:component.loaded', { html: null, error: error.message });
        }
    }

    /**
     * M√©thode utilitaire pour diffuser un √©v√©nement √† l'√©chelle de l'application.
     * @param {string} eventName - Le nom de l'√©v√©nement √† diffuser.
     * @param {object} [detail={}] - Le payload √† inclure dans `event.detail`.
     * @private
     */
    broadcast(eventName, detail) {
        document.dispatchEvent(new CustomEvent(eventName, { bubbles: true, detail }));
    }


    

    /**
     * G√®re la logique de suppression d'√©l√©ments via l'API en ex√©cutant plusieurs requ√™tes en parall√®le.
     * Notifie le reste de l'application en cas de succ√®s ou d'√©chec.
     * @param {object} payload - Le payload contenant les IDs, l'URL et l'originatorId.
     * @param {number[]} payload.ids - Tableau des IDs des entit√©s √† supprimer.
     * @param {string} payload.url - L'URL de base de l'API de suppression.
     * @param {string} [payload.originatorId] - L'ID du composant qui a initi√© la demande (pour un rafra√Æchissement cibl√©).
     * @private
     */
    _handleApiDeleteRequest(payload) {
        const { ids, url, originatorId } = payload;

        // On cr√©e un tableau de promesses, une pour chaque requ√™te de suppression.
        const deletePromises = ids.map(id => {
            const deleteUrl = `${url}/${id}`; // Construit l'URL finale pour chaque ID.
            return fetch(deleteUrl, { method: 'DELETE' })
                .then(response => {
                    if (!response.ok) throw new Error(`Erreur lors de la suppression de l'√©l√©ment ${id}.`);
                    return response.json();
                });
        });

        // On attend que toutes les promesses de suppression soient r√©solues.
        Promise.all(deletePromises)
            .then(results => {
                const message = results.length > 1 ? `${results.length} √©l√©ments supprim√©s avec succ√®s.` : '√âl√©ment supprim√© avec succ√®s.';
                console.log(`${this.nomControleur} - SUCC√àS: Suppression(s) r√©ussie(s).`, results);
                this._showNotification(message, 'success');
                // On r√©initialise l'√©tat de la s√©lection et on notifie tout le monde (toolbar, etc.)
                this._setSelectionState([]);
                this._requestListRefresh(originatorId);
                this.broadcast('ui:confirmation.close');
            })
            .catch(error => {
                console.error("-> ERREUR: √âchec de la suppression API.", error);
                this.broadcast('app:error.api', { error: error.message || "La suppression a √©chou√©." });
                this.broadcast('ui:confirmation.close'); // Ferme aussi la modale en cas d'erreur.
            });
    }

    /**
     * Diffuse une demande de rafra√Æchissement de la liste.
     * @param {string|null} [originatorId=null] - L'ID du composant qui a initi√© la demande, pour un rafra√Æchissement cibl√©.
     * @private
     */
    _requestListRefresh(originatorId = null) {
        const payload = {
            idEntreprise: this.currentIdEntreprise,
            idInvite: this.currentIdInvite,
        };
        if (originatorId) payload.originatorId = originatorId;
        this.broadcast('app:list.refresh-request', payload);
    }

    /**
     * Diffuse une demande pour afficher une notification (toast).
     * @param {string} text - Le message √† afficher.
     * @param {'success'|'error'|'info'|'warning'} [type='info'] - Le type de notification.
     * @private
     */
    _showNotification(text, type = 'info') {
        this.broadcast('app:notification.show', { text, type });
    }



    /**
     * Encapsule la logique de diffusion d'une demande de confirmation de suppression.
     * @param {object} payload - Le payload de l'√©v√©nement d'origine, doit contenir `selection`.
     * @private
     */
    _requestDeleteConfirmation(payload) {
        const itemCount = payload.selection ? payload.selection.length : 0;
        if (itemCount === 0) return; // Ne rien faire si la s√©lection est vide.

        this.broadcast('ui:confirmation.request', {
            title: 'Confirmation de suppression',
            body: `√ätes-vous s√ªr de vouloir supprimer ${itemCount} √©l√©ment(s) ?`,
            onConfirm: { type: 'app:api.delete-request', payload: payload }
        });
    }


    
    /**
     * G√®re une demande de suppression provenant de la barre d'outils en construisant
     * et en diffusant une demande de confirmation.
     * @param {object} payload - Le payload de l'√©v√©nement, contenant `selection` et `actionConfig`.
     * @private
     */
    _handleToolbarDeleteRequest(payload) {
        this.broadcast('ui:confirmation.request', {
            title: payload.title || 'Confirmation de suppression',
            body: payload.body || `√ätes-vous s√ªr de vouloir supprimer ${payload.selection.length} √©l√©ment(s) ?`,
            onConfirm: {
                type: 'app:api.delete-request',
                payload: {
                    ids: payload.selection, // Les IDs √† supprimer
                    url: payload.actionConfig.url, // L'URL de base pour la suppression
                    originatorId: payload.actionConfig?.originatorId // L'ID de la collection √† rafra√Æchir (optionnel)
                }
            }
        });
    }
}